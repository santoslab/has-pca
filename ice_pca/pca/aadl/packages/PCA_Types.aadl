package PCA_Types
public
  with Base_Types, Data_Model, PCA_Properties, ICE_Types;

data Alarm_Type
  properties
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Pump_Overheated","Defective_Battery","Low_Battery",
        "POST_Failure","RAM_Failure","ROM_failure","CPU_Failure","Thread_Monitor_Failure",
        "Air_In_Line","Upstream_Occlusion","Downstream_Occlusion","Empty_Reservoir",
      "Basal_Overinfusion","Bolus_Overinfusion","Square_Bolus_Overinfusion","No_Alarm");
end Alarm_Type; 

data Warning_Type
  properties
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Over_Max_Drug_Per_Hour",
    --"Below_VTBI_Soft_Limit","Above_VTBI_Soft_Limit","Below_Basal_Rate_Soft_Limit","Above_Basal_Rate_Soft_Limit",
        "Soft_Limit","Low_Reservoir","Priming_Failure",
      "Basal_Underinfusion","Bolus_Underinfusion","Square_Bolus_Underinfusion",
      "Input_Needed","Long_Pause","Drug_Not_In_Library","Hard_Limit_Violated","Voltage_OOR",
      "Priming_Failure","No_Warning");
  annex Assertion
  {**  --specifies meaning of each warning type
<<WARNING_TYPE: x +=>
  Over_Max_Drug_Per_Hour->MAX_DOSE_WARNING,
--  Below_VTBI_Soft_Limit->BELOW_VTBI_SOFT,
--  Above_VTBI_Soft_Limit->ABOVE_VTBI_SOFT,
--  Below_Basal_Rate_Soft_Limit->BELOW_BASAL_SOFT,
--  Above_Basal_Rate_Soft_Limit->ABOVE_BASAL_SOFT,
  Soft_Limit->SOFT_LIMIT,
  Low_Reservoir->LOW_RESERVOIR,
  Basal_Underinfusion->BASAL_UNDERINFUSION,
  Bolus_Underinfusion->BOLUS_UNDERINFUSION,
  Square_Bolus_Underinfusion->SQUARE_UNDERINFUSION,
  Input_Needed->INPUT_NEEDED,
  Long_Pause->LONG_PAUSE,
  Drug_Not_In_Library->DRUG_NOT_IN_LIBRARY,
  Hard_Limit_Violated->HARD_LIMIT_VIOLATED,
  Voltage_OOR->VOLTAGE_OOR,
  Priming_Failure->PRIME_FAIL,
  No_Warning->NO_WARNING >>     
  **};     
end Warning_Type;  

data Status_Type
  properties
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Stopped","Bolus","Basal","KVO","Square_Bolus");
end Status_Type;  

data Drug_Code  --string representing what drug, conectration, and volume is in the reservoir
  properties
    Data_Model::Data_Representation => String;
end Drug_Code;

data Dose_Rate_Unit  --unit of dose rates specified buy the pharmacy 
  properties
    Data_Model::Data_Representation => String;
end Dose_Rate_Unit;  

data Flow_Rate  --dose rate
  properties
    Data_Model::Base_Type => (classifier(Base_Types::Integer_16));
    Data_Model::Measurement_Unit => "ml/hr";
end Flow_Rate;  

data Infusion_Unit  --unit of VTBI
  properties
    Data_Model::Data_Representation => String;
end Infusion_Unit;  

data Drug_Volume  --volume of VTBI
  properties
    Data_Model::Base_Type => (classifier(Base_Types::Integer_16));
    Data_Model::Measurement_Unit => "ml";
end Drug_Volume;  

data Drug_Weight  --string representing what drug, conectration, and volume is in the reservoir
  properties
    Data_Model::Base_Type => (classifier(Base_Types::Integer_16));
    Data_Model::Measurement_Unit => "mg";
end Drug_Weight;

data Drug_Concentration  --string representing what drug, concentration, and volume is in the reservoir
  properties
    Data_Model::Base_Type => (classifier(Base_Types::Float));
    Data_Model::Measurement_Unit => "mg/l";
end Drug_Concentration;

data Drug_Record  --holds pharmacy data for a drug that may be used with the pump
  properties
    Data_Model::Data_Representation => Struct;
    Data_Model::Element_Names => 
      ( "code",                   --unique identifier for this drug/concentration
      "name",                   --generic drug name
 --     "location",               --Context of drug application
      "dose_rate_unit",         --The unit of drug dose (for example milliliters/hour)
      "vtbi_unit",              --The unit of VTBI (for example milliliter)
      "amount",                 --The weight of the drug dissolved in the diluent (mg)
      "concentration",          --Drug concentration; as prescribed
      "vtbi_lower_soft",        --Lower soft limit of drug volume to be infused
      "vtbi_lower_hard",        --Lower hard limit of drug volume to be infused
      "vtbi_typical",           --Typical drug volume to be infused
      "vtbi_upper_soft",        --Upper soft limit of drug volume to be infused
      "vtbi_upper_hard",        --Upper hard limit of drug volume to be infused
      "basal_rate_lower_soft",  --Lower soft limit of basal drug dose rate
      "basal_rate_lower_hard",  --Lower hard limit of basal drug dose rate
      "basal_rate_typical",     --Typical basal drug dose rate
      "basal_rate_upper_soft",  --Upper soft limit of basal drug dose rate
      "basal_rate_upper_hard",  --Upper hard limit of basal drug dose rate
      "bolus_typical",          --Typical Value of Bolus Volume
      "square_bolus_rate_typical"      --Typical rate of clinician commanded bolus
      );
    Data_Model::Base_Type => 
      ( classifier(Drug_Code),           --code
        classifier(Base_Types::String),  --name
--        classifier(Base_Types::String),  --location
        classifier(Dose_Rate_Unit),      --dose_rate_unit
        classifier(Infusion_Unit),       --vtbi_unit
        classifier(Drug_Weight),         --amount
        classifier(Drug_Concentration),  --concentration
        classifier(Drug_Volume),     --vtbi_lower_soft
        classifier(Drug_Volume),     --vtbi_lower_hard
        classifier(Drug_Volume),     --vtbi_typical
        classifier(Drug_Volume),     --vtbi_upper_soft
        classifier(Drug_Volume),     --vtbi_upper_hard
        classifier(Flow_Rate),           --basal_rate_lower_soft
        classifier(Flow_Rate),           --basal_rate_lower_hard
        classifier(Flow_Rate),           --basal_rate_typical
        classifier(Flow_Rate),           --basal_rate_upper_soft
        classifier(Flow_Rate),           --basal_rate_upper_hard
        classifier(Drug_Volume),     --bolus_typical
        classifier(PCA_Types::Flow_Rate)    --ssquare_bolus_rate_typical
      );
end Drug_Record;


data Drug_Library  --holds drug records for all drugs approved by the hospital pharmacy
  properties
    Data_Model::Data_Representation => Array;
    Data_Model::Base_Type => (classifier(Drug_Record));
    Data_Model::Dimension => (PCA_Properties::Drug_Library_Size);
end Drug_Library;
  
data Prescription
  properties
    Data_Model::Data_Representation => Struct;
    Data_Model::Element_Names => 
      ( "patient",
        "drug_name",
        "code",
        "concentration",
        "initial_volume",
        "basal_flow_rate",
        "vtbi",
        "max_drug_per_hour",
        "minimum_time_between_bolus",
        "date_Rx_filled",
        "prescriber",
        "pharmacist"
      );
    Data_Model::Base_Type => 
      ( classifier(Base_Types::String),   --patient
        classifier(Base_Types::String),   --drug name
        classifier(PCA_Types::Drug_Code),            --code
        classifier(PCA_Types::Drug_Concentration),   --concentration
        classifier(PCA_Types::Drug_Volume),          --initial volume
        classifier(PCA_Types::Flow_Rate),            --basal flow rate
        classifier(PCA_Types::Drug_Volume),          --VTBI
        classifier(PCA_Types::Drug_Volume),          --maximum drug allowed per hour
        classifier(ICE_Types::Minute),    --min time between bolus doses
        classifier(Base_Types::String),   --date filled; may change to a date type
        classifier(Base_Types::String),   --prescribing physician
        classifier(Base_Types::String)    --pharmacist        
      );      
end Prescription;  
  
data Fault_Record  --record of fault for log
  properties
    Data_Model::Data_Representation => Struct;
    Data_Model::Element_Names => ("alarm","warning","occurrence_time");
    Data_Model::Base_Type => ( classifier(Alarm_Type),classifier(Warning_Type),classifier(ICE_Types::Minute)); --(BLESS_Types::Time));
end Fault_Record;  

data Fault_Log  --holds records of faults
  properties    
    Data_Model::Data_Representation => Array;
    Data_Model::Base_Type => (classifier(Fault_Record));
    Data_Model::Dimension => (PCA_Properties::Fault_Log_Size);
end Fault_Log;

data Event_Record  --record of event for log
  properties
    Data_Model::Data_Representation => Union;
    Data_Model::Base_Type => (classifier (Start_Patient_Bolus_Event), 
      classifier (Stop_Patient_Bolus_Event));
    Data_Model::Element_Names => ("start_patient_bolus", "stop_patient_bolus" );
end Event_Record;  

data Start_Patient_Bolus_Event
end Start_Patient_Bolus_Event;

data Stop_Patient_Bolus_Event
end Stop_Patient_Bolus_Event;

data Event_Log  --holds records of events
  properties
    Data_Model::Data_Representation => Array;
    Data_Model::Base_Type => (classifier(Event_Record));
    Data_Model::Dimension => (PCA_Properties::Event_Log_Size);
end Event_Log;


data Infusion_Type   --used for over- and under-infusion alarms
  properties
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Bolus_Infusion","Square_Infusion","Basal_Infusion","KVO_Infusion");
end Infusion_Type;  


data Scan_Data_Type  --used for data from scanner
  --TBD
end Scan_Data_Type;
  
data Pump_Fault_Type
  properties
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Prime_Failure","Pump_Hot","Bubble","Upstream_Occlusion",
      "Downstream_Occlusion","Overinfusion","Underinfusion" );
end Pump_Fault_Type;

data Message  --messages displayed on control panel and ice console

end Message;
  
data Sound  --sounds made by control panel and ice console

end Sound;

end PCA_Types;
